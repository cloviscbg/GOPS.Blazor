@if (Shifts.Count <= 0)
{
	<div class="@className hover:bg-hover hover:dark:bg-hover-dark">
		<CustomButton Disabled="@Disabled"
					  OnClick="@Click"
					  OnDoubleClick="@(() => DoubleClick(null))"
					  Class="flex w-full h-full" />
	</div>
}
else
{
	<div class="@className">
		@foreach (var shift in Shifts)
		{
			<div @key="@shift.Id"
				 class="@shiftClass @(ShiftColor.FromValue(shift.Color).ToString())">
				<CustomButton Disabled="@Disabled"
							  OnClick="@Click"
							  OnDoubleClick="@(() => DoubleClick(shift))"
							  Class="flex flex-col items-start justify-start w-full h-full !px-1 !py-2 text-xs font-normal italic text-foreground dark:text-foreground-accentdark">
					@shift.StartDate.ToString(@"HH:mm") @shift.EndDate.ToString(@"HH:mm")
				</CustomButton>
			</div>
		}
	</div>
}

@namespace GOPS.Blazor.Server.Components.Internal

@code {

	protected string className => new CssBuilder("flex flex-col gap-y-1 p-[6px] rounded-r-2xl border-r border-divider dark:border-border-dark")
		.AddClass("hover:cursor-pointer", !Disabled)
		.AddClass("mud-ripple", Shifts.Count <= 0 && !Disabled)
		.AddClass("hover:!cursor-default hover:!bg-transparent", Disabled)
		.AddClass(Class)
		.Build();

	protected string shiftClass => new CssBuilder("w-full h-full rounded-2xl border-l-[4px] dark:border-r dark:border-y dark:bg-surface-dark hover:opacity-60")
		.AddClass("!bg-container dark:!bg-disabled-dark/10 !border-disabled/10 dark:!border-disabled-dark/40 hover:!opacity-100", Disabled)
		.AddClass("mud-ripple", !DisableRipple)
		.AddClass(ShiftClass)
		.Build();

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public List<Shift> Shifts { get; set; } = [];

	[Parameter]
	public string Class { get; set; } = "";

	[Parameter]
	public string ShiftClass { get; set; } = "";

	[Parameter]
	public string? Style { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public bool DisableRipple { get; set; }

	[Parameter]
	public EventCallback OnClick { get; set; }

	[Parameter]
	public EventCallback<Shift?> OnDoubleClick { get; set; }

	async Task Click()
	{
		await OnClick.InvokeAsync();
	}

	async Task DoubleClick(Shift? shift)
	{
		await OnDoubleClick.InvokeAsync(shift);
	}
}
