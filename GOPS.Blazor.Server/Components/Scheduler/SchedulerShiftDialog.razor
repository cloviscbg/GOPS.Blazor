<MudDialog Class="add-shift-dialog">
	<TitleContent>
		<div class="flex flex-row items-center">
			<span class="select-none font-black text-2xl text-foreground-accent dark:text-foreground-accentdark">
				@Title
			</span>
			<Spacer />
			<MudIconButton OnClick="@Cancel"
						   Class="text-foreground dark:text-foreground-dark hover:bg-hover hover:dark:bg-hover-dark">
				<svg class="h-5 w-5"
					 viewBox="0 0 24 24"
					 fill="none"
					 stroke="currentColor"
					 stroke-width="1.5"
					 stroke-linecap="round"
					 stroke-linejoin="round">
					<path d="M6 6L18 18" />
					<path d="M18 6L6 18" />
				</svg>
			</MudIconButton>
		</div>

	</TitleContent>
	<DialogContent>
		<div class="@SelectedShift?.Color w-full h-[5rem] rounded-2xl border-l-[4px] dark:border-r dark:border-y dark:bg-surface-dark">
			<div class="flex flex-col items-start justify-start w-full h-full !px-1 !py-2 select-none text-xs font-normal italic text-foreground dark:text-foreground-accentdark">
				@StartDate?.ToString(@"HH:mm") @EndDate?.ToString(@"HH:mm")
			</div>
		</div>
		<MudSelectExtended ItemCollection="@Peoples"
						   ValuePresenter="MudExtensions.Enums.ValuePresenter.ItemContent"
						   @bind-Value="@SelectedPeople"
						   Variant="Variant.Outlined"
						   DisablePopoverPadding="true"
						   SearchBox="true"
						   SearchBoxClearable="true"
						   SearchBoxPlaceholder="Search people..."
						   AdornmentIcon="@Icons.Material.Rounded.KeyboardArrowDown"
						   AnchorOrigin="Origin.BottomCenter"
						   ReadOnly="@isReadOnly"
						   PopoverClass="add-shift-select-popover dark:[&_.mud-list-subheader-extended]:!bg-surface-dark"
						   InputClass="add-shift-input">
			<ItemTemplate>
				<User Title="@($"{context?.Value?.FirstName} {context?.Value?.LastName}")"
					  Image="@context?.Value?.ImageProfile"
					  Class="overflow-hidden"
					  AvatarClass="!h-12 !w-12 bg-container dark:bg-background-dark"
					  ImageClass="inline-block h-12 w-12"
					  FallBackClass="text-base font-black leading-none text-primary-400"
					  TitleClass="text-ellipsis whitespace-break-spaces overflow-hidden font-black text-xs text-foreground dark:text-foreground-dark"
					  DescriptionClass="text-xs font-medium text-foreground- dark:text-foreground-dark" />
			</ItemTemplate>
		</MudSelectExtended>

		<div class="flex flex-row items-center gap-x-4">
			<MudDatePicker @bind-Date="@StartDate"
						   Variant="Variant.Outlined"
						   ShowWeekNumbers="true"
						   Label="Date"
						   DateFormat="dd/MM/yyyy"
						   DisableToolbar="true"
						   AdornmentIcon="@Icons.Material.Rounded.CalendarMonth"
						   AnchorOrigin="Origin.BottomLeft"
						   TransformOrigin="Origin.TopLeft"
						   IconSize="Size.Small"
						   Class="add-shift-input" />

			@if (EndDate!.Value.Date > StartDate!.Value.Date)
			{
				<svg class="h-5 w-5 text-foreground dark:text-foreground-dark"
					 viewBox="0 0 24 24"
					 fill="none"
					 stroke="currentcolor"
					 stroke-width="1.5"
					 stroke-linecap="round"
					 stroke-linejoin="round">
					<path d="M9 5L16 12L9 19" />
				</svg>
				<span class="text-sm text-foreground dark:text-foreground-dark">
					@EndDate?.ToString("dd/MM/yyyy")
				</span>
			}
		</div>


		<div class="flex flex-row items-center gap-x-4">
			<MudSelectExtended ItemCollection="@listTimes"
							   @bind-Value="@StartTime"
							   ValuePresenter="MudExtensions.Enums.ValuePresenter.ItemContent"
							   Variant="Variant.Outlined"
							   AdornmentIcon="@Icons.Material.Rounded.KeyboardArrowDown"
							   AnchorOrigin="Origin.BottomLeft"
							   TransformOrigin="Origin.TopLeft"
							   Label="Start"
							   SearchBox="true"
							   SearchBoxClearable="true"
							   Class="add-shift-input"
							   PopoverClass="add-shift-select-popover dark:[&_.mud-list-subheader-extended]:!bg-surface-dark">
				<ItemTemplate>
					<span class="py-2 text-foreground dark:text-foreground-dark">
						@context.Value.ToString("hh':'mm")
					</span>
				</ItemTemplate>
			</MudSelectExtended>

			<svg class="h-5 w-5 text-foreground dark:text-foreground-dark"
				 viewBox="0 0 24 24"
				 fill="none"
				 stroke="currentcolor"
				 stroke-width="1.5"
				 stroke-linecap="round"
				 stroke-linejoin="round">
				<path d="M9 5L16 12L9 19" />
			</svg>

			<MudSelectExtended ItemCollection="@listTimes"
							   @bind-Value="@EndTime"
							   ValuePresenter="MudExtensions.Enums.ValuePresenter.ItemContent"
							   Variant="Variant.Outlined"
							   AdornmentIcon="@Icons.Material.Rounded.KeyboardArrowDown"
							   AnchorOrigin="Origin.BottomRight"
							   TransformOrigin="Origin.TopRight"
							   Label="End"
							   SearchBox="true"
							   SearchBoxClearable="true"
							   Class="add-shift-input"
							   PopoverClass="add-shift-select-popover dark:[&_.mud-list-subheader-extended]:!bg-surface-dark">
				<ItemTemplate>
					<span class="py-2 text-foreground dark:text-foreground-dark">
						@context.Value.ToString("hh':'mm")
					</span>
				</ItemTemplate>
			</MudSelectExtended>

			<span class="text-base font-black text-teal-400">
				@totalHoursText
			</span>
		</div>
	</DialogContent>
</MudDialog>

@namespace GOPS.Blazor.Server.Components.Internal

@code {
	bool isReadOnly;
	string? totalHoursText;
	TimeSpan startTime;
	TimeSpan endTime;
	List<TimeSpan> listTimes = [];

	[CascadingParameter]
	MudDialogInstance? MudDialog { get; set; }

	[Parameter]
	public string? Title { get; set; }

	[Parameter]
	public Shift? SelectedShift { get; set; }

	[Parameter]
	public People? SelectedPeople { get; set; }

	[Parameter]
	public DateTime? StartDate { get; set; }

	public DateTime? EndDate { get; set; }

	public TimeSpan StartTime
	{
		get { return startTime; }
		set
		{
			startTime = value;
			StartDate = StartDate?.Date + startTime;
			EndDate = StartDate?.AddHours(CalculateTotalHours());
		}
	}

	public TimeSpan EndTime
	{
		get { return endTime; }
		set
		{
			endTime = value;
			EndDate = StartDate?.AddHours(CalculateTotalHours());
		}
	}


	[Parameter]
	public List<People?>? Peoples { get; set; }

	protected override void OnInitialized()
	{
		listTimes = new TimeSpan().CreateMinutes(15).ToList()!;

		if (SelectedShift is null)
		{
			StartTime = TimeSpan.FromHours(DateTime.Now.Hour);
			EndTime = startTime + TimeSpan.FromHours(6);

			SelectedShift = new()
				{
					StartDate = this.StartDate!.Value,
					EndDate = this.StartDate!.Value
				};

			base.OnInitialized();
			return;
		}

		isReadOnly = true;
		StartTime = SelectedShift.StartDate.TimeOfDay;
		EndTime = SelectedShift.EndDate.TimeOfDay;
		base.OnInitialized();
	}

	void Submit() => MudDialog?.Close(DialogResult.Ok(true));
	void Cancel() => MudDialog?.Cancel();

	double CalculateTotalHours()
	{
		TimeSpan tHours;
		if (startTime <= endTime)
		{
			tHours = (endTime - startTime);
			totalHoursText = TotalHoursText(tHours);
			return tHours.TotalHours;
		}

		//By default if startTime is > endTime we assume that is another day
		var timeToSubtract = new TimeSpan(1, endTime.Hours, endTime.Minutes, endTime.Seconds);
		tHours = timeToSubtract.Subtract(startTime);
		totalHoursText = TotalHoursText(tHours);

		return tHours.TotalHours;
	}

	string TotalHoursText(TimeSpan totalHours)
	{
		var result = Math.Floor(totalHours.TotalHours) != totalHours.TotalHours;
		return result ? totalHours.ToString("h' h 'mm' min'") : $"{totalHours.TotalHours.ToString()} h";
	}
}
