<div class="flex flex-col pt-3 gap-y-6 bg-surface dark:bg-surface-dark">
	@foreach (var people in Peoples ?? [])
	{
		var totalHours = GetTotalHours(people.Id);

		<div class="flex flex-row min-h-24 shadow-lg ring-1 ring-inset dark:ring-0 ring-border rounded-2xl bg-surface dark:bg-container-dark">
			<div class="grid w-full"
				 style="@GridTemplateStyle">
				<div class="z-50 rounded-r-2xl bg-surface dark:bg-surface-dark"
					 style="@FixedStyle">
					<div class="flex rounded-2xl w-full h-full items-center py-4 pl-4 md:!pl-3 pr-3 border-r border-border dark:border-border-dark bg-surface dark:bg-container-dark">
						<User Title="@($"{people.FirstName} {people.LastName}")"
							  Description=@($"{totalHours} Hrs")
							  Image="@people.ImageProfile"
							  Class="overflow-hidden"
							  AvatarClass="hidden md:flex !h-12 !w-12 bg-container dark:bg-surface-dark"
							  ImageClass="inline-block h-12 w-12"
							  FallBackClass="text-base font-black leading-none text-primary-400 dark:text-primary-400"
							  TitleClass="text-ellipsis whitespace-break-spaces overflow-hidden font-black text-xs text-foreground dark:text-foreground-dark"
							  DescriptionClass="text-xs font-medium text-foreground- dark:text-foreground-dark" />
					</div>
				</div>

				@if (Scheduler?.CurrentView is ViewType.DayView)
				{

				}
				else
				{
					@foreach (var dayCell in Scheduler?.DayCells ?? new())
					{
						var shifts = GetShift(dayCell.Date.Day, people.Id);

						if (shifts?.Count <= 0)
						{
							<div class="mud-ripple flex p-1 items-start rounded-r-2xl border-r border-divider dark:border-border-dark hover:bg-hover hover:dark:bg-hover-dark hover:cursor-pointer"></div>
						}
						else
						{
							foreach (var shift in shifts ?? [])
							{
								if (shift.StartDate.IsDateEqual(dayCell.Date))
								{
									<div class=" group flex p-[6px] rounded-r-2xl border-r border-divider dark:border-border-dark hover:cursor-pointer">
										<div class=@($"{shift.Color} w-full h-full rounded-2xl border-l-8 border-r border-y dark:bg-surface-dark group-hover:opacity-60")>
											<button class="mud-ripple flex flex-col items-start justify-start w-full h-full px-1 py-2 text-xs font-normal italic text-foreground dark:text-foreground-accentdark">
												@shift.StartDate.ToString(@"HH:mm") @shift.EndDate.ToString(@"HH:mm")
											</button>
										</div>
									</div>
								}
							}
						}
					}
				}

				<div class="rounded-r-2xl"></div>
			</div>
		</div>
	}
</div>

@namespace GOPS.Blazor.Server.Components.Internal

@code {

	[CascadingParameter]
	Scheduler? Scheduler { get; set; }

	[Parameter]
	public List<People>? Peoples { get; set; }

	[Parameter]
	public string? FixedStyle { get; set; }

	[Parameter]
	public string? GridTemplateStyle { get; set; }

	List<Shift> GetShifts(Guid peopleId)
	{
		List<Shift> foundShifts = [];

		if (Scheduler?.CurrentView is ViewType.DayView)
		{
			return foundShifts;
		}

		var start = Scheduler?.DayCells?[0].Date ?? new();
		var end = Scheduler?.DayCells?[^1].Date ?? new();

		foundShifts = Scheduler?.Shifts?
			.Where(x => x.PeopleId == peopleId && x.StartDate.IsBetweenDates(start, end))
			.ToList() ?? [];

		return foundShifts;
	}

	List<Shift> GetShift(int day, Guid peopleId)
	{
		var shifts = Scheduler?.Shifts?
			.Where(x => x.PeopleId == peopleId && x.StartDate.Day == day)
			.ToList();

		return shifts ?? [];
	}

	int GetTotalHours(Guid peopleId)
	{
		var totalHours = GetShifts(peopleId).Sum(x => (int)x.TotalTime.TotalHours);
		return totalHours;
	}
}
