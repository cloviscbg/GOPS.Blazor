<div class="flex flex-col pt-3 gap-y-6 bg-surface dark:bg-surface-dark">
	@foreach (var people in Peoples ?? [])
	{
		var totalHours = Scheduler?.GetTotalHoursPerPeople(people.Id);

		<div class="flex flex-row min-h-24 shadow-lg ring-1 ring-inset dark:ring-0 ring-border rounded-2xl bg-surface dark:bg-container-dark">
			<div class="grid w-full"
				 style="@GridTemplateStyle">
				<div class="z-50 rounded-r-2xl bg-surface dark:bg-surface-dark"
					 style="@FixedStyle">
					<div class="flex rounded-2xl w-full h-full items-center py-4 pl-4 md:!pl-3 pr-3 border-r border-border dark:border-border-dark bg-surface dark:bg-container-dark">
						<User Title="@($"{people.FirstName} {people.LastName}")"
							  Description=@($"{totalHours} Hrs")
							  Image="@people.ImageProfile"
							  Class="overflow-hidden"
							  AvatarClass="hidden md:flex !h-12 !w-12 bg-container dark:bg-surface-dark"
							  ImageClass="inline-block h-12 w-12"
							  FallBackClass="text-base font-black leading-none text-primary-400 dark:text-primary-400"
							  TitleClass="text-ellipsis whitespace-break-spaces overflow-hidden font-black text-xs text-foreground dark:text-foreground-dark"
							  DescriptionClass="text-xs font-medium text-foreground- dark:text-foreground-dark" />
					</div>
				</div>

				@if (Scheduler?.CurrentView is ViewType.DayView)
				{
					var currentDate = Scheduler!.CurrentDate;
					var shifts = GetShift(currentDate, people.Id);
					var isPast = currentDate.IsPastDate();

					<SchedulerTimeCell Shifts="@shifts"
									   MinutesInterval="@Scheduler!.DefaultMinutesInterval"
									   Disabled="@isPast"
									   DisableRipple="@isPast" />
				}
				else
				{
					@foreach (var dayCell in Scheduler?.DayCells ?? new())
					{
						var shifts = GetShift(dayCell.Date, people.Id);
						var isPast = dayCell.Date.IsPastDate();

						<SchedulerDayCell Shifts="@shifts"
									   CellDate="@dayCell.Date"
									   Disabled="@isPast"
									   DisableRipple="@isPast" />
					}
					<div class="rounded-r-2xl"></div>
				}

			</div>
		</div>
	}
</div>

@namespace GOPS.Blazor.Server.Components.Internal

@code {

	[CascadingParameter]
	Scheduler? Scheduler { get; set; }

	[Parameter]
	public List<People>? Peoples { get; set; }

	[Parameter]
	public string? FixedStyle { get; set; }

	[Parameter]
	public string? GridTemplateStyle { get; set; }

	List<Shift> GetShift(DateTime date, Guid peopleId)
	{
		var shifts = Scheduler?.Shifts?
			.Where(x => x.PeopleId == peopleId && x.StartDate.IsDateEqual(date))
			.OrderBy(x => x.StartDate)
			.ToList();

		return shifts ?? [];
	}
}
